/*
 *    MCreator note:
 *
 *    If you lock base mod element files, you can edit this file and the proxy files
 *    and they won't get overwritten. If you change your mod package or modid, you
 *    need to apply these changes to this file MANUALLY.
 *
 *    Settings in @Mod annotation WON'T be changed in case of the base mod element
 *    files lock too, so you need to set them manually here in such case.
 *
 *    Keep the CompactorModElements object in this class and all calls to this object
 *    INTACT in order to preserve functionality of mod elements generated by MCreator.
 *
 *    If you do not lock base mod element files in Workspace settings, this file
 *    will be REGENERATED on each build.
 *
 */
package net.mcreator.compactor;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import net.minecraftforge.fml.network.simple.SimpleChannel;
import net.minecraftforge.fml.network.NetworkRegistry;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import net.minecraftforge.fml.event.server.FMLServerStartingEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.common.MinecraftForge;

import net.minecraft.util.ResourceLocation;
import net.minecraft.item.Item;
import net.minecraft.entity.EntityType;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.block.Block;

import java.util.function.Supplier;

@Mod(CompactorMod.MOD_ID)
public class CompactorMod {
	public static final String MOD_ID = "heroes_compactor_mod";
//	public static final Logger LOGGER = LogManager.getLogger(CompactorMod.class);
//	private static final String PROTOCOL_VERSION = "1";
//	public static final SimpleChannel PACKET_HANDLER = NetworkRegistry.newSimpleChannel(new ResourceLocation("compactor", "compactor"),
//			() -> PROTOCOL_VERSION, PROTOCOL_VERSION::equals, PROTOCOL_VERSION::equals);
//	public CompactorModElements elements;

	public CompactorMod() {
//		elements = new CompactorModElements();
		IEventBus bus = FMLJavaModLoadingContext.get().getModEventBus();
		bus.register(this);
		bus.addListener(this::init);
		bus.addListener(this::clientLoad);
		MinecraftForge.EVENT_BUS.register(new CompactorModFMLBusEvents(this));
		
//		Esto lo está escribiendo: NELIO
//		El MCREATOR hace esto, me limito a copiarlo y adaptarlo:
		
	}

	private void init(FMLCommonSetupEvent event) {
		elements.getElements().forEach(element -> element.init(event));
	}

	public void clientLoad(FMLClientSetupEvent event) {
		elements.getElements().forEach(element -> element.clientLoad(event));
	}

	@SubscribeEvent
	public void registerBlocks(RegistryEvent.Register<Block> event) {
		event.getRegistry().registerAll(elements.getBlocks().stream().map(Supplier::get).toArray(Block[]::new));
	}

	@SubscribeEvent
	public void registerItems(RegistryEvent.Register<Item> event) {
		event.getRegistry().registerAll(elements.getItems().stream().map(Supplier::get).toArray(Item[]::new));
	}

	@SubscribeEvent
	public void registerEntities(RegistryEvent.Register<EntityType<?>> event) {
		event.getRegistry().registerAll(elements.getEntities().stream().map(Supplier::get).toArray(EntityType[]::new));
	}
	
//	------------------------------
//	No es necesario, lo comento pero no lo borro por si lo fuésemos a usar.
//	------------------------------
	
//	@SubscribeEvent
//	public void registerEnchantments(RegistryEvent.Register<Enchantment> event) {
//		event.getRegistry()
//				.registerAll(elements.getEnchantments().stream().map(Supplier::get).toArray(Enchantment[]::new));
//	}

//	------------------------------
//	No es necesario, lo comento pero no lo borro por si lo fuésemos a usar.
//	------------------------------
	
//	@SubscribeEvent
//	public void registerSounds(RegistryEvent.Register<net.minecraft.util.SoundEvent> event) {
//		elements.registerSounds(event);
//	}
	
//	------------------------------
//	Es inútil y no sé para qué está. No lo borro por si fuese necesario.
//	------------------------------
	
//	private static class CompactorModFMLBusEvents {
//		private final CompactorMod parent;
//		CompactorModFMLBusEvents(CompactorMod parent) {
//			this.parent = parent;
//		}
//
//		@SubscribeEvent
//		public void serverLoad(FMLServerStartingEvent event) {
//			this.parent.elements.getElements().forEach(element -> element.serverLoad(event));
//		}
//	}
}
